git init 是初始化一个Git仓库

git add <file> 添加文件，这个命令可以反复使用，添加多个文件，add的文件必须包含在git的路径下

git commit -m <message>  使用该命令可以将add的所有文件提交到git仓库，message可以是任何内容

git status 
当我们修改文件后，可以通过该命令查看修改的结果，该命令可以随时掌握工作区的状态

git diff <file> 使用该命令可以查看fiel文件在修改前后的不同，当我们用git status命令查看文件被修改后，可以通过该命令对比修改前后的文件，以便下一步的提交，再次提交的步骤和前面一样

git log 可以查看我们提交文档的历史记录
git log --pretty=oneline 可以简化输出的信息 （输出的一大串符号是commit id(版本号)）,是用SHA1计算出来的一个非常大的数字，用十六进制表示，用这个来表示是因为git是一个分布式控制系统，需要很多人在同一个版本库中工作，这样表示可以避免命名冲突

git reset --hard HEAD^ 该命令可以将文档返回到上一个版本，HEAD表示当前版本，HEAD^就表示上一个版本，HEAD^^就表示上上个版本，如果要表示往上的100个版本，可以写成HEAD~100

cat <file> 可以查看一个文档的内容

git reset --hard <commit id> 该命令可以回到指定的某个版本，<commit id>是指的需要退回版本的版本号，只需要填写前几位就行，git会自动寻找

gti reflog 可以返回你操作的每一条命令

总得来说，git log 可以查看提交历史，来确定要退回到哪个版本，git reflog可以查看命令历史，以便确定要回到未来的哪个版本

git checkout -- file 可以让这个文件返回到最近一次git commit或git add时的状态，修改的是工作区的状态，就是还没有提交到暂存区时的状态，比如当在notepad++中修改了一个文件并保存了，可以通过该命令返回到保存前的状态

git reset HEAD file 该命令可以将暂存区的修改撤销，重新放回工作区，相当于回到了checkout的操作了。如果已经提交到版本库中了，那就需要用到git reset --hard HEAD^命令了

rm file 用来删除文件管理器下的文件

git rm file 用来删除版本库中的文件，然后使用git commit -m "xxxx"来提交删除命令就可以将文件从版本库中删除了,如果删错了可以使用checkout命令还原被删除的文件

/****添加远程库******/
1.登入GitHub账号后新建一个Git仓库(Repository)
2.git remote add origin git@github.com:lisimoner/GitNotes.git 运行该命令后将本地仓库与GitHub上建立的GitNotes仓库进行关联
3.git push -u origin master 将本地库的所有内容推送到远程库上，由于是第一次提交，所有添加了-u参数
4.git push origin master 只要本地文件提交到了本地的仓库，可以通过该命令提交到github仓库



git clone git@github.com:lisimoner/GitNotes.git 可以将别人的GitHub仓库里的东西克隆到本地，git@github.com:lisimoner/GitNotes.git使用的是SSH的地址，也可以使用https的地址，SSH的速度更快