git init 是初始化一个Git仓库

git add <file> 添加文件，这个命令可以反复使用，添加多个文件，add的文件必须包含在git的路径下

git commit -m <message>  使用该命令可以将add的所有文件提交到git仓库，message可以是任何内容

git status 
当我们修改文件后，可以通过该命令查看修改的结果，该命令可以随时掌握工作区的状态

git diff <file> 使用该命令可以查看fiel文件在修改前后的不同，当我们用git status命令查看文件被修改后，可以通过该命令对比修改前后的文件，以便下一步的提交，再次提交的步骤和前面一样

git log 可以查看我们提交文档的历史记录
git log --pretty=oneline 可以简化输出的信息 （输出的一大串符号是commit id(版本号)）,是用SHA1计算出来的一个非常大的数字，用十六进制表示，用这个来表示是因为git是一个分布式控制系统，需要很多人在同一个版本库中工作，这样表示可以避免命名冲突

git reset --hard HEAD^ 该命令可以将文档返回到上一个版本，HEAD表示当前版本，HEAD^就表示上一个版本，HEAD^^就表示上上个版本，如果要表示往上的100个版本，可以写成HEAD~100

cat <file> 可以查看一个文档的内容

git reset --hard <commit id> 该命令可以回到指定的某个版本，<commit id>是指的需要退回版本的版本号，只需要填写前几位就行，git会自动寻找

gti reflog 可以返回你操作的每一条命令

总得来说，git log 可以查看提交历史，来确定要退回到哪个版本，git reflog可以查看命令历史，以便确定要回到未来的哪个版本

git checkout -- file 可以让这个文件返回到最近一次git commit或git add时的状态，修改的是工作区的状态，就是还没有提交到暂存区时的状态，比如当在notepad++中修改了一个文件并保存了，可以通过该命令返回到保存前的状态

git reset HEAD file 该命令可以将暂存区的修改撤销，重新放回工作区，相当于回到了checkout的操作了。如果已经提交到版本库中了，那就需要用到git reset --hard HEAD^命令了

rm file 用来删除文件管理器下的文件

git rm file 用来删除版本库中的文件，然后使用git commit -m "xxxx"来提交删除命令就可以将文件从版本库中删除了,如果删错了可以使用checkout命令还原被删除的文件

/****添加远程库******/
1.登入GitHub账号后新建一个Git仓库(Repository)
2.git remote add origin git@github.com:lisimoner/GitNotes.git 运行该命令后将本地仓库与GitHub上建立的GitNotes仓库进行关联
3.git push -u origin master 将本地库的所有内容推送到远程库上，由于是第一次提交，所有添加了-u参数
4.git push origin master 只要本地文件提交到了本地的仓库，可以通过该命令提交到github仓库
5.若是在第3步出现error:failed to push some refs to "SSH"，需要用到 git pull --rebase origin master 命令来初始化仓库



git clone git@github.com:lisimoner/GitNotes.git 可以将别人的GitHub仓库里的东西克隆到本地，git@github.com:lisimoner/GitNotes.git使用的是SSH的地址，也可以使用https的地址，SSH的速度更快

          /**********创建分支**************/
1.创建dev分支，然后切换到dev分支 使用git checkout -b dev命令来创建， -b表示创建被切换，相当于执行了git branch dev (创建dev分支)
git checkout dev(切换到dev分支)两条命令
2.git branch 会列出所有的分支，并在当前分支前加上一个*号
3.git merge dev 可以将dev分支的工作成果合并到master分支上
4.git branch -d dev 删除dev分支

1.git switch -c dev 创建并切换到新的dev分支，也是相当于执行了git branch dev(创建dev分支) git switch dev (切换到dev分支) 两条命令  使用git switch 比git checkout 更容易理解

开发一个新功能时，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D name 来强行删除


/**********多人协作*************/
1.当需要查看远程库的信息时，用git remote
或者用git remote -v 来显示更详细的信息
2.从本地推送分支，使用git push origin branch-name ,如果推送失败，先用git pull 来抓取远程的新提交
3.在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name ，本地和远程分支的名称最好一致
4.git branch --set-upstream branch-name origin/branch-name  建立本地分支与远程分支的关联
5.从远程抓取分支时，使用 git pull ，如果有冲突，线处理冲突 


git rebase 命令可以将本地未push的分叉提交历史整理成直线，rebase的目的是使得我们在查看历史提交的变化时更容易



/***********标签管理************/
      创建标签
1.切换到需要打标签的分支上   git branch
2.git tag <name>   <name>为新标签名
3.gti tag  查看该分支上所有的标签
4.如果提交的commit忘记打标签了，那就使用git tag <name> commit.id 给commit打上标签
5.git tag -a <tagname> -m "xxxx"  给<tagname>标签指定标签信息xxxx 
      操作标签
1.git tag -d <tagname>   删除指定的本地标签名
2.git push origin <tagname>  推送<tagname>标签到远程
3.git origin --tag  一次性推送所有的本地标签到远程
4.如果需要删除推送到远程的标签，需要先从本地删除 git tag -d <tagname>    然后从远程删除  git push origin :refs/tags/<tagname>


配置别名：将git的命令进行缩写
git status    ->>>> git st   是相同的效果
git config --global alias.st status  使用该行命令可以将status缩写成st
如果需要修改配置的别名，需要在.git/config文件中[alias]中直接删除该配置别名就行，全局命令下的配置文件放在用户主目录下的一个隐藏文件.gitconfige中。